Name der Klasse wurde von IPv4 in IPv4_paser umbenannt.
The name of the class has been changed from IPv4 to IPv4_paser

void IP_paser::routePacket(IPv4Datagram *datagram, InterfaceEntry *destIE, bool fromHL,IPv4Address* nextHopAddrPtr)
{
    // TBD add option handling code here

    if (datagram->getOptionCode()==IPOPTION_STRICT_SOURCE_ROUTING || datagram->getOptionCode()==IPOPTION_LOOSE_SOURCE_ROUTING)
    {
        IPv4SourceRoutingOption rtOpt = datagram->getSourceRoutingOption();
        if (rtOpt.getNextAddressPtr()<rtOpt.getLastAddressPtr())
        {
            IPv4Address nextRouteAddress = rtOpt.getRecordAddress(rtOpt.getNextAddressPtr()/4);
            rtOpt.setNextAddressPtr(rtOpt.getNextAddressPtr()+4);
            datagram->setSrcAddress(rt->getRouterId());
            datagram->setDestAddress(nextRouteAddress);
        }
    }

    IPv4Address destAddr = datagram->getDestAddress();

    EV << "Routing datagram `" << datagram->getName() << "' with dest=" << destAddr << ": ";

    controlMessageToManetRouting(MANET_ROUTE_UPDATE,datagram);

    // check for local delivery
    if (rt->isLocalAddress(destAddr))
    {
        EV << "local delivery\n";
        if (datagram->getSrcAddress().isUnspecified())
            datagram->setSrcAddress(destAddr); // allows two apps on the same host to communicate
        numLocalDeliver++;
        reassembleAndDeliver(datagram);
        return;
    }
    // JcM Fix: broadcast limited address 255.255.255.255 or network broadcast, i.e. 192.168.0.255/24
    if (destAddr == IPv4Address::ALLONES_ADDRESS || rt->isLocalBroadcastAddress(destAddr))
    {
        // check if local
        if (!fromHL)
        {
            EV << "limited broadcast recived \n";
            if (datagram->getSrcAddress().isUnspecified())
                datagram->setSrcAddress(destAddr); // allows two apps on the same host to communicate
            numLocalDeliver++;
            reassembleAndDeliver(datagram);
        }
        else
        { // send limited broadcast packet
            if (destIE!=NULL)
            {
                if (datagram->getSrcAddress().isUnspecified())
                     datagram->setSrcAddress(destIE->ipv4Data()->getIPAddress());
                fragmentAndSend(datagram, destIE, IPv4Address::ALLONES_ADDRESS);
            }
            else if (destIE==NULL && forceBroadcast)
            {
                for (int i = 0;i<ift->getNumInterfaces();i++)
                {
                    InterfaceEntry *ie = ift->getInterface(i);
                    if (!ie->isLoopback())
                    {
                        IPv4Datagram * dataAux = datagram->dup();
                        if (dataAux->getSrcAddress().isUnspecified())
                             dataAux->setSrcAddress(ie->ipv4Data()->getIPAddress());
                        fragmentAndSend(datagram->dup(), ie, IPv4Address::ALLONES_ADDRESS);
                    }
                }
                delete datagram;
            }
            else
            {
                numDropped++;
                delete datagram;
            }
        }
        return;
    }

    // if datagram arrived from input gate and IP_FORWARD is off, delete datagram
    if (!fromHL && !rt->isIPForwardingEnabled())
    {
        EV << "forwarding off, dropping packet\n";
        numDropped++;
        delete datagram;
        return;
    }
// Check drop rules

    const IPv4RouteRule *rule = checkOutputRule(datagram,destIE);
    if (rule && rule->getRule()==IPv4RouteRule::DROP)
    {
        EV << "\n Drop datagram with source "<< datagram->getSrcAddress() <<
              " and  destination "<< datagram->getDestAddress() << " by rule "<<rule->info() << "\n";
        numDropped++;
        delete datagram;
        return;
    }
// end check drop
    IPv4Address nextHopAddr;

    // if output port was explicitly requested, use that, otherwise use IP routing
    if (destIE)
    {
        EV << "using manually specified output interface " << destIE->getName() << "\n";
        // and nextHopAddr remains unspecified
        if (manetRouting  && fromHL && nextHopAddrPtr)
           nextHopAddr = *nextHopAddrPtr;  // Manet DSR routing explicit route
        // special case ICMP reply
        else if (destIE->isBroadcast())
        {
            // if the interface is broadcast we must search the next hop
            const IPv4Route *re = rt->findBestMatchingRoute(destAddr);
            if (re!=NULL && re->getSource()== IPv4Route::MANET  && re->getHost()!=destAddr)
                re=NULL;
            if (re && destIE == re->getInterface())
                nextHopAddr = re->getGateway();
        }
    }
    else
    {
        // use IP routing (lookup in routing table)
        const IPv4Route *re = rt->findBestMatchingRoute(destAddr);

        if (re!=NULL && re->getSource()== IPv4Route::MANET)
        {
// special case the address must agree
           if (re->getHost()!=destAddr)
               re=NULL;
        }
        //ADD by Eugen
if(rt->getDefaultRoute() == re){
    ev << "is Default Route!!!\n";
    // falls der Empfaenger in Subnetz von PASER sich befindet, aber nur die Default Route gefunden wurde => starte Route Discovery.
    if( (destAddr & PASER_MASK) == (PASER_SUBNETZ & PASER_MASK) ){
        ev << "Packet destination is PASER NETWORK: " << destAddr.str() << "\n";
        re = NULL;
    }
    // falls der Empfaenger sich ausserhalb der PASER Subnetz befindet, dann teste ob der Weg zum Gateway bekannt ist, oder nicht.
    // falls der Weg zum Gateway auch die Default Route ist, dann starte Route Discovery.
    else{
        const IPv4Route *tempRe = rt->findBestMatchingRoute( re->getGateway() );
        if( /*(tempRe->getGateway() & PASER_MASK) == (PASER_SUBNETZ & PASER_MASK)*/rt->getDefaultRoute() == tempRe ){
            ev << "re->getGateway(): " << re->getGateway().str() << "\n";
            re = NULL;
        }
    }
}
        // error handling: destination address does not exist in routing table:
        // notify ICMP, throw packet away and continue
        if (re==NULL)
        {
            if (manetRouting==false)
            {
               EV << "unroutable, sending ICMP_DESTINATION_UNREACHABLE\n";
               numUnroutable++;
               icmpAccess.get()->sendErrorMessage(datagram, ICMP_DESTINATION_UNREACHABLE, 0);
               return;
            }
            else
            {
               controlMessageToManetRouting(MANET_ROUTE_NOROUTE,datagram);
               return;
            }
        }

        // extract interface and next-hop address from routing table entry
        destIE = re->getInterface();
        nextHopAddr = re->getGateway();
    }

    // set datagram source address if not yet set
    if (datagram->getSrcAddress().isUnspecified())
        datagram->setSrcAddress(destIE->ipv4Data()->getIPAddress());

    // default: send datagram to fragmentation
    EV << "output interface is " << destIE->getName() << ", next-hop address: " << nextHopAddr << "\n";
    numForwarded++;

    //
    // fragment and send the packet
    //
    if (datagram->getTransportProtocol()==IP_PROT_MANET)
    {
       //  check control Info
       if (datagram->getControlInfo())
             delete datagram->removeControlInfo();
    }

    fragmentAndSend(datagram, destIE, nextHopAddr);
}

//ADD by Eugen
if(rt->getDefaultRoute() == re){
    ev << "is Default Route!!!\n";
    // falls der Empfaenger in Subnetz von PASER sich befindet, aber nur die Default Route gefunden wurde => starte Route Discovery.
    if( (destAddr & PASER_MASK) == (PASER_SUBNETZ & PASER_MASK) ){
        ev << "Packet destination is PASER NETWORK: " << destAddr.str() << "\n";
        re = NULL;
    }
    // falls der Empfaenger sich ausserhalb der PASER Subnetz befindet, dann teste ob der Weg zum Gateway bekannt ist, oder nicht.
    // falls der Weg zum Gateway auch die Default Route ist, dann starte Route Discovery.
    else{
        const IPv4Route *tempRe = rt->findBestMatchingRoute( re->getGateway() );
        if( /*(tempRe->getGateway() & PASER_MASK) == (PASER_SUBNETZ & PASER_MASK)*/rt->getDefaultRoute() == tempRe ){
            ev << "re->getGateway(): " << re->getGateway().str() << "\n";
            re = NULL;
        }
    }
}


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
###################################################################################################################
*******************************************************************************************************************


#ifndef NEWFRAGMENT
void IP_paser::reassembleAndDeliver(IPv4Datagram *datagram)
{

    // reassemble the packet (if fragmented)
    if (datagram->getFragmentOffset()!=0 || datagram->getMoreFragments())
    {
        EV << "Datagram fragment: offset=" << datagram->getFragmentOffset()
           << ", MORE=" << (datagram->getMoreFragments() ? "true" : "false") << ".\n";

        // erase timed out fragments in fragmentation buffer; check every 10 seconds max
        if (simTime() >= lastCheckTime + 10)
        {
            lastCheckTime = simTime();
            fragbuf.purgeStaleFragments(simTime()-fragmentTimeoutTime);
        }

        datagram = fragbuf.addFragment(datagram, simTime());
        if (!datagram)
        {
            EV << "No complete datagram yet.\n";
            return;
        }
        EV << "This fragment completes the datagram.\n";
    }

    // decapsulate and send on appropriate output gate
    int protocol = datagram->getTransportProtocol();
    cPacket *packet=NULL;
    if (protocol!=IP_PROT_DSR)
    {
        packet = decapsulateIP(datagram);
    }

    if (protocol==IP_PROT_ICMP)
    {
        // incoming ICMP packets are handled specially
        handleReceivedICMP(check_and_cast<ICMPMessage *>(packet));
    }
    else if (protocol==IP_PROT_DSR)
    {
        // If the protocol is Dsr Send directely the datagram to manet routing
        controlMessageToManetRouting(MANET_ROUTE_NOROUTE,datagram);
    }
    else if (protocol==IP_PROT_IP)
    {
        // tunnelled IP packets are handled separately
        send(packet, "preRoutingOut");
    }
    else
    {
        // JcM Fix: check if the transportOut port are connected, otherwise
        // discard the packet
        int gateindex = mapping.getOutputGateForProtocol(protocol);
//add by Eugen
        ev << "protocol = " << protocol << "\n";
        if(protocol==IP_PROT_UDP){
            cPacket *temp = packet;
            if (dynamic_cast<UDPPacket*>(temp)){
                ev << "UDP OK!\n";
                UDPPacket *udpPacket = check_and_cast<UDPPacket*>(temp);
                if(udpPacket->getDestinationPort() == 653){
                    gateindex = 7;
                }
            }
            else{
                ev << "UDP NOT OK!\n";
            }
//            temp = packet->decapsulate();
//            if (dynamic_cast<UDPPacket*>(temp)){
//                ev << "UDP OK!\n";
//                UDPPacket *udpPacket = check_and_cast<UDPPacket*>(temp);
//                if(udpPacket->getDestinationPort() == 653){
//                    gateindex = 7;
//                }
//            }
//            else{
//                ev << "UDP NOT OK!\n";
//            }
        }
//end add
        if (gate("transportOut",gateindex)->isPathOK()) {
            send(packet, "transportOut", gateindex);
        } else {
            EV << "L3 Protocol not connected. discarding packet" << endl;
            delete(packet);
        }
    }
}

//add by Eugen
        ev << "protocol = " << protocol << "\n";
        if(protocol==IP_PROT_UDP){
            cPacket *temp = packet;
            if (dynamic_cast<UDPPacket*>(temp)){
                ev << "UDP OK!\n";
                UDPPacket *udpPacket = check_and_cast<UDPPacket*>(temp);
                if(udpPacket->getDestinationPort() == 653){
                    gateindex = 7;
                }
            }
            else{
                ev << "UDP NOT OK!\n";
            }
//            temp = packet->decapsulate();
//            if (dynamic_cast<UDPPacket*>(temp)){
//                ev << "UDP OK!\n";
//                UDPPacket *udpPacket = check_and_cast<UDPPacket*>(temp);
//                if(udpPacket->getDestinationPort() == 653){
//                    gateindex = 7;
//                }
//            }
//            else{
//                ev << "UDP NOT OK!\n";
//            }
        }
//end add