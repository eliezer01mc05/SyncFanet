//
// Generated file, do not edit! Created by nedtool 5.5 from uavnet/linklayer/xmac/XMacPkt.msg.
//

#ifndef __INET_XMACPKT_M_H
#define __INET_XMACPKT_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include "inet/linklayer/base/MACFrameBase_m.h"
// }}


namespace inet {

/**
 * Class generated from <tt>uavnet/linklayer/xmac/XMacPkt.msg:15</tt> by nedtool.
 * <pre>
 * packet XMacPkt extends MACFrameBase
 * {
 *     int preambleCont;
 *     MACAddress destinationAddress[]; // currently known occupied slots
 * }
 * </pre>
 */
class XMacPkt : public ::inet::MACFrameBase
{
  protected:
    int preambleCont;
    MACAddress *destinationAddress; // array ptr
    unsigned int destinationAddress_arraysize;

  private:
    void copy(const XMacPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const XMacPkt&);

  public:
    XMacPkt(const char *name=nullptr, short kind=0);
    XMacPkt(const XMacPkt& other);
    virtual ~XMacPkt();
    XMacPkt& operator=(const XMacPkt& other);
    virtual XMacPkt *dup() const override {return new XMacPkt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getPreambleCont() const;
    virtual void setPreambleCont(int preambleCont);
    virtual void setDestinationAddressArraySize(unsigned int size);
    virtual unsigned int getDestinationAddressArraySize() const;
    virtual MACAddress& getDestinationAddress(unsigned int k);
    virtual const MACAddress& getDestinationAddress(unsigned int k) const {return const_cast<XMacPkt*>(this)->getDestinationAddress(k);}
    virtual void setDestinationAddress(unsigned int k, const MACAddress& destinationAddress);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const XMacPkt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, XMacPkt& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_XMACPKT_M_H

